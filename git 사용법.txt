# Git

- .git 폴더가 위치한 폴더의 모든 내용을 관리해주는 프로그램
- .git 폴더를 추가해 관리를 시작한 곳을 레포지토리(Repository)라고 부른다
- .git 폴더 내부에는 해당 레포지토리의 모든 정보가 기록되어 있다(변경 이력, 복원 지점 등)
- .git 내부의 정보를 이용해 해당 레포지토리를 예전 모습으로 되돌릴 수 있다
- Git은 레포지토리 내부의 아주 미세한 변화도 알아채고 관리해준다
 - Eclipse에 내장된 Git을 사용할 수도 있다
 
 # 새 프로젝트 레포지토리로 만들기
 
 -  Window -> Show View -> Other... -> Git -> Git Repositories -> 새 프로젝트 생성-> 새 프로젝트 우클릭 -> Team -> Share Project
 -> 새 레포지토리 생성 또는 존재하는 레포지토리 선택
  (ex: C:\JavaFullStack\repos\GitStudy)
 - 원래 java-workspace에 있는 프로젝트가 레포지토리로 옮겨가게 된다
 - 프로젝트가 Git의 관리를 받기 시작하게 된다   
 
 
 
 # Commit
 
  - 레포지토리의 현재 상태를 확정짓는 명령어
  - 언제든지 커밋한 시점으로 돌아갈 수 있다(체크아웃)
  - history에서 여태까지의 커밋 이력을 볼 수 있다
  	(레포지토리 우클릭 -> Show in -> history)
  	
 # staged와 unstaged 상태
 
 - 가장 최근 커밋 이후로 변경사항이 있는 레포지토리 내부의 파일들은 모두 unstaged상태가 된다
 - unstaged 파일들 중 이번 커밋에 확정짓고 싶은 파일들만 선택하여 staged상태로 변경 후 커밋을 진행할 수 있다
 - 미완성 파일들은 unstaged 상태로 두는 것이 좋다
 - 커밋은 저장처럼 자주 하는것이 아니라 프로젝트의 기능에 확실한 변경점이 있을 때 한번씩 하는 것이다 
 
 # History
 
 - 레포지토리의 변경 이력을 한눈에 볼 수 있는 명령어
 - 파일을 클릭하면 해당 파일만의 History를 볼 수 있다
 - History를 보고 원하는 시점의 커밋으로 언제든 체크아웃 할 수 있다
 	(체크아웃 진행 시 커밋되지 않은 모든 사항은 사라지므로 주의)
 - 과거 시점의 커밋으로 돌아갔을 때 코드를 수정한 후 커밋하면 다시 원래의 미래로 돌아갈 수 없다
 - HEAD : 내가 현재 보고 있는 커밋
 
 # .gitignore
 
 - 레포지토리에서 관리하고 싶지 않은 파일 목록을 적어놓는 곳
 - 이곳에 적어둔 파일들은 instaged 상태에 올라가지 않는다
 - 보통 사용하는 IDE의 설정파일 또는 프로젝트의 리소스 등을 제외하는데 사용한다
 
 # Branch
 
 - 하나의 레포지토리를 다양한 형태로 보관할 수 있는 기능
 - 브랜치를 사용하여 하나의 커밋으로부터 여러 갈래의 커밋으로 갈라질 수 있다
 - 다른 커밋으로 변경하는 것도 체크아웃이지만 다른 브랜치로 변경하는 것도 체크아웃이라고 한다
 -  다른 브랜치로 변경할 때도 커밋되지 않은 수정 사항은 모두 소실된다

# Merge

- 한 브랜치에 다른 브랜치의 내용을 합치면서 새로운 커밋을 생성한다
- 현재 체크아웃브랜치에 다른 브랜치를 우클릭하여 합치게 된다
- 두 브랜치를 합치는 도중 같은 부분에 대한 다른 버전이 존재하는 경우 충돌이 발생하게 된다(최대한 없애야 하는 일)
- 두 브랜치에서 완벽하게 다른 부분만 수정하여 충돌이 발생하지 않는 경우에는 별다른 조지 첪이 두 브랜치가 합쳐진다(추구해야할 방향)

 # Github
 
 - Git은 다른 컴퓨터에 존재하는 레포지토리(원격 레포지토리)를 다운받거나 현재 컴퓨터에 존재하는 레포지토리(로컬 레포지토리)를 업로드하는 기능을 제공한다
 - 팀 단위로 프로젝트를 진행하는 경우 하나의 원격 레포지토리를 생성하고 각자의 로컬 레포지토리로 복사하여 프로젝트를 진핼하게 된다
 - Github는 레포지토리를 보관해주는 웹 사이트일 뿐이다(Git 공식 페이지 아님)
 
 # clone
 
 - 원격 레포지토리를 로컬에 그대로 다운로드 받는 것
 
 # push
 
 - 로컬 레포지토리의 특정 브랜치를 원격에 업로드하는 것
 
 # pull
 
 - 원격 레포지토리의 특정 브랜치를 로컬에 다운로드 받는 것